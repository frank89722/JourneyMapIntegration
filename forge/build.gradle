plugins {
    id 'io.github.CDAGaming.cursegradle' version '1.+'
    id "com.modrinth.minotaur" version "2.+"
    id 'net.minecraftforge.gradle' version '[6.0.24,6.2)'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
    id 'idea'
    id 'eclipse'
}

archivesBaseName = "${mod_id}-forge"

minecraft {
    mappings channel: 'official', version: minecraft_version

    copyIdeResources = true

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                    source project(":api").sourceSets.main
                    source project(":compat-waystones").sourceSets.main
                    source project(":compat-ftbchunks").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                    source project(":api").sourceSets.main
                    source project(":compat-waystones").sourceSets.main
                    source project(":compat-ftbchunks").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"

    compileOnly project(':api')
    compileOnly project(":common")

    implementation fg.deobf("dev.architectury:architectury-forge:${project.architectury_version}")

    compileOnly project(':compat-ftbchunks')
    implementation fg.deobf("dev.ftb.mods:ftb-library-forge:${project.ftb_library_version}")
    implementation fg.deobf("dev.ftb.mods:ftb-teams-forge:${project.ftb_teams_version}")
    implementation fg.deobf("dev.ftb.mods:ftb-chunks-forge:${project.ftb_chunks_version}")

    compileOnly project(':compat-waystones')
    implementation fg.deobf("maven.modrinth:balm:${project.balm_forge_version}")
    implementation fg.deobf("maven.modrinth:waystones:${project.waystones_forge_version}")

    compileOnly fg.deobf(group: 'info.journeymap', name: 'journeymap-api-forge', version: project.journeymap_api_version, changing: true)
    implementation fg.deobf("maven.modrinth:journeymap:${project.jm_forge_version}")

}

mixin {
    add(sourceSets.main, "${mod_id}.refmap.json")
    config "${mod_id}.mixins.json"

    debug.verbose = true
    debug.export = true
    dumpTargetOnFailure = true

    quiet
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
    source(project(":api").sourceSets.main.allSource)
    source(project(":compat-waystones").sourceSets.main.allSource)
    source(project(":compat-ftbchunks").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
    from project(":api").sourceSets.main.resources
    from project(":compat-waystones").sourceSets.main.resources
    from project(":compat-ftbchunks").sourceSets.main.resources
}

jar {
    manifest {
        attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_author,
                'Specification-Version'   : project.jar.archiveVersion,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_author,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestamp'               : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Build-On-Minecraft'      : minecraft_version,
                'MixinConfigs'            : "jmi.mixins.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}

def ENV = System.getenv()
def release_title = "[Forge] v${version}"

if (ENV.CF_TOKEN) {
    curseforge {
        apiKey = ENV.CF_TOKEN
        project {
            id = curse_id
            releaseType = release_type
            addGameVersion "Forge"
            addGameVersion "Java 21"
            addGameVersion "Client"
            addGameVersion minecraft_version
            mainArtifact(jar) {
                it.displayName = release_title
            }
            relations {
                it.requiredDependency 'journeymap'
                it.optionalDependency 'ftb-chunks-forge'
                it.optionalDependency 'waystones'
            }
            changelog = rootProject.file('changelog.md')
            changelogType = 'markdown'
        }
    }
}

if (ENV.MODRINTH_TOKEN) {
    modrinth {
        token = ENV.MODRINTH_TOKEN
        projectId = modrinth_id
        versionType = release_type
        versionName = release_title
        versionNumber = "${version}+forge"
        uploadFile = jar
        gameVersions = [minecraft_version]
        changelog = rootProject.file('changelog.md').text
        dependencies {
            required.project "lfHFW1mp" // journeymap
            optional.project "LOpKHB2A" // waystones
        }
    }
}
