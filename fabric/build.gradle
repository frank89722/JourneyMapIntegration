plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'idea'
    id 'io.github.CDAGaming.cursegradle' version '1.+'
    id "com.modrinth.minotaur" version "2.+"
}

archivesBaseName = "${mod_id}-fabric"

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'

    compileOnly project(':common')
    compileOnly project(':api')

    modImplementation "dev.architectury:architectury-fabric:${project.architectury_version}"

    compileOnly project(':compat-ftbchunks')
    modImplementation "dev.ftb.mods:ftb-library-fabric:${project.ftb_library_version}"
    modImplementation "dev.ftb.mods:ftb-teams-fabric:${project.ftb_teams_version}"
    modImplementation "dev.ftb.mods:ftb-chunks-fabric:${project.ftb_chunks_version}"

    compileOnly project(':compat-waystones')
    modImplementation "maven.modrinth:balm:${project.balm_fabric_version}"
    modImplementation "maven.modrinth:waystones:${project.waystones_fabric_version}"

    modApi group: 'info.journeymap', name: 'journeymap-api-fabric', version: project.journeymap_api_version, changing: true
    modRuntimeOnly "maven.modrinth:journeymap:${project.jm_fabric_version}"
}

loom {
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}


processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
    from project(":common").sourceSets.main.resources
    from project(":api").sourceSets.main.resources
    from project(":compat-waystones").sourceSets.main.resources
    from project(":compat-ftbchunks").sourceSets.main.resources
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
    source(project(":api").sourceSets.main.allSource)
    source(project(":compat-waystones").sourceSets.main.allSource)
    source(project(":compat-ftbchunks").sourceSets.main.allSource)
}

jar {
    from("LICENSE") {
        rename { "${it}_${mod_name}" }
    }
}

def ENV = System.getenv()
def release_title = "[Fabric] v${version}"

if (ENV.CF_TOKEN) {
    curseforge {
        apiKey = ENV.CF_TOKEN
        project {
            id = curse_id
            releaseType = release_type
            addGameVersion "Fabric"
            addGameVersion "Quilt"
            addGameVersion "Java 21"
            addGameVersion "Client"
            addGameVersion minecraft_version
            mainArtifact(remapJar.archivePath) {
                it.displayName = release_title
            }
            relations {
                it.requiredDependency 'journeymap'
                it.optionalDependency 'ftb-chunks-fabric'
                it.optionalDependency 'waystones'
            }
            changelog = rootProject.file('changelog.md')
            changelogType = 'markdown'

        }

        options {
            forgeGradleIntegration = false
        }
    }
}

if (ENV.MODRINTH_TOKEN) {
    modrinth {
        token = ENV.MODRINTH_TOKEN
        projectId = modrinth_id
        versionType = release_type
        versionName = release_title
        versionNumber = "${version}+fabric"
        uploadFile = remapJar
        gameVersions = [minecraft_version]
        loaders = ["fabric", "quilt"]
        changelog = rootProject.file('changelog.md').text
        dependencies {
            required.project "lfHFW1mp" // journeymap
            optional.project "LOpKHB2A" // waystones
        }
    }
}
